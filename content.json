[{"title":"array_multisort()根据数组中某个键值对数组进行排序","date":"2020-07-04T15:59:29.636Z","path":"2020/07/04/array_multisort_use/","text":"array_multisort(array1,sorting order,sorting type,array2…)array1:必选，规定数组，指定要进行排序的数组；sorting order：可选，规定排列顺序； - SORT_ASC - 默认。按升序排列 (A-Z)。 - SORT_DESC - 按降序排列 (Z-A)；sorting type：可选，规定排序类型；array2：可选，指定数组；其中一个key值是array1数组的规定数组 第一种使用方法： 123456789101112131415161718192021222324252627282930313233343536373839404142$data = [ [ \"country_id\" =&gt; \"SA\", \"sort\" =&gt; 9 ], [ \"country_id\" =&gt; \"AE\", \"sort\" =&gt; 30 ], [ \"country_id\" =&gt; \"US\", \"sort\" =&gt; 1 ]];foreach ($data as $item) &#123; $sort[] = $item['sort'];&#125;array_multisort($sort,SORT_ASC, $data);print_r($data);result：Array( [0] =&gt; Array ( [country_id] =&gt; US [sort] =&gt; 1 ) [1] =&gt; Array ( [country_id] =&gt; SA [sort] =&gt; 9 ) [2] =&gt; Array ( [country_id] =&gt; AE [sort] =&gt; 30 )) 参数中的数组被当成一个表的列并以行来进行排序 - 这类似 SQL 的 ORDER BY 子句的功能。第一个数组是要排序的主要数组，可以理解为对照数组。下一个数组中的行（值）比较为相同的话，就会按照对照数组中相应值的排序方式进行排序，依此类推。 第二种使用方法： 123456789101112$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");array_multisort($a);print_r($a);result :Array ( [0] =&gt; Bear [1] =&gt; Cat [2] =&gt; Dog [3] =&gt; Horse [4] =&gt; Zebra ) 第三种使用方法 12345678910111213141516171819$a1=array(1,30,15,7,25);$a2=array(4,30,20,41,66);$num=array_merge($a1,$a2);array_multisort($num,SORT_DESC,SORT_NUMERIC);print_r($num);result:Array ( [0] =&gt; 66 [1] =&gt; 41 [2] =&gt; 30 [3] =&gt; 30 [4] =&gt; 25 [5] =&gt; 20 [6] =&gt; 15 [7] =&gt; 7 [8] =&gt; 4 [9] =&gt; 1) 这里第三个参数是指按照数字类型进行排序，相应的还有SORT_STRING -&gt;字符串类型，SORT_LOCALE_STRING -&gt;把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改），SORT_NATURAL -&gt;把每一项作为字符串来处理，使用类似 natsort() 的自然排序，SORT_FLAG_CASE -&gt;可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写","link":"","tags":[]}]